name: üöÄ Screenshot Testing CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  screenshot-testing:
    name: Automated Screenshot Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1

    - name: Install dependencies
      run: bun install
      env:
        BUN_INSTALL_CACHE_DIR: ~/.bun/install/cache
        BUN_LOCKFILE_GENERATE: false

    - name: Build Astro site
      run: bun run build

    - name: Start static server
      run: bunx http-server dist -p 4324 &
      shell: bash

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Clean up existing containers
      run: |
        docker compose down --remove-orphans || true
        docker stop $(docker ps -q --filter "name=chrome") || true
        docker rm $(docker ps -aq --filter "name=chrome") || true

    - name: Start Docker Chrome container
      run: |
        docker compose up -d
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for Selenium Grid..."
        for i in {1..30}; do
          if curl -s http://localhost:4444/ui/ > /dev/null 2>&1; then
            echo "‚úÖ Selenium Grid is ready"
            curl -s http://localhost:4444/status | head -20 || true
            break
          fi
          echo "‚è≥ Waiting for Selenium Grid... ($i/30)"
          sleep 2
        done
        
        echo "Waiting for web server..."
        for i in {1..30}; do
          if curl -s http://localhost:4324 > /dev/null 2>&1; then
            echo "‚úÖ Web server is ready"
            curl -s http://localhost:4324 | head -10 || true
            break
          fi
          echo "‚è≥ Waiting for web server... ($i/30)"
          sleep 1
        done
        
        # Check container status
        echo "Checking container status..."
        docker ps -a | grep chrome || true
        docker compose ps || true

    - name: Create output directories
      run: |
        mkdir -p screenshots
        mkdir -p logs
        mkdir -p tests_output

    - name: Run selenium screenshot tests
      run: |
        timeout 60s bun run test:selenium:ci || {
          echo "‚ö†Ô∏è Tests timed out or failed, but continuing..."
          exit 0
        }
      continue-on-error: true
      env:
        SELENIUM_HOST: localhost
        SELENIUM_PORT: 4444
        BASE_URL: http://localhost:4324
      timeout-minutes: 2

    - name: Upload screenshots as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: screenshots-${{ github.run_number }}
        path: screenshots/
        if-no-files-found: ignore
        retention-days: 7

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          logs/
          tests_output/
        if-no-files-found: ignore
        retention-days: 7

    - name: Container logs
      if: always()
      run: docker compose logs chrome